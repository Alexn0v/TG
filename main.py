import telebot
from telebot import types
from telebot import custom_filters
import dbhelper as db
import textdoc as tc
import schedule
from threading import Thread
from time import sleep

######## MAIN: 5145905234:AAGPmHnQcp-P64B8sWOMYkQGSVoqVgRKP7U
######## TESTING: 5040853954:AAEclR2ai7cGDMtCl5rWab3BsbVQLkBNocE

bot = telebot.TeleBot("5145905234:AAGPmHnQcp-P64B8sWOMYkQGSVoqVgRKP7U")

# –û–°–ù–í–û–ù–û–ï –ú–ï–ù–Æ | –ö–û–ú–ê–ù–î–´: START, HELP, MENU
@bot.message_handler(commands=['start','help','menu'])
def welcome_menu(message):

	# –î–û–ë–ê–í–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –í –ë–î
	USER_ID = message.from_user.id
	USER_NAME = message.from_user.username
	db.register_user(USER_ID,USER_NAME)

	# –û–°–ù–í–û–ù–û–ï –ú–ï–ù–Æ
	Main_Menu = types.InlineKeyboardMarkup(row_width=2)
	Item_1 = types.InlineKeyboardButton ('‚úçÔ∏è Write valentine', callback_data='Write')
	Item_2 = types.InlineKeyboardButton ('üóÇ All valentines', callback_data='All')
	Item_3 = types.InlineKeyboardButton ('üì§ Send all valentines', callback_data='Send')
	Item_4 = types.InlineKeyboardButton ('üßê Information', callback_data='Information')
	Main_Menu.add (Item_1, Item_2, Item_3, Item_4)

	# –û–¢–ü–†–ê–í–ö–ê –ú–ï–ù–Æ | TEXT | PHOTO | MARKUP
	bot.send_photo(message.chat.id,photo=tc.main_menu_photo,caption=tc.main_menu_txt,reply_markup=Main_Menu,)

		#|||||||||||||||||||||||||||||||||||||||#
		#_______________________________________#
		#_______________________________________#
		# ////// –û–ë–†–ê–ë–û–¢–ö–ê –ë–ê–ó –ó–ê–ü–†–û–°–û–í  \\\\\\ #

# –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–ü–†–û–°–ê "MENU"
@bot.callback_query_handler(lambda query: query.data in ['menu'])
def get_back_to_main_menu(call):
	if call.data == 'menu':
		welcome_menu(call.message)
	else:
		pass

# –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–ü–†–û–°–ê "WRITE"
@bot.callback_query_handler(lambda query: query.data in ['Write'])
def welcome_writing(call):
	bot.send_message(call.message.chat.id,text=tc.write_menu_open)
	bot.register_next_step_handler(call.message,get_name)

# –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–ü–†–û–°–ê "SEND"
@bot.callback_query_handler(lambda query: query.data in ['Send'])
def send_all_messages(call):
	USER_ID = call.from_user.id
	bot.send_message(call.message.chat.id,text=tc.send_menu_txt)
	bot.register_next_step_handler(call.message,send_messages,USER_ID)

# –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–ü–†–û–°–ê "INFORMATION" !!!!!
@bot.callback_query_handler(lambda query: query.data in ['Information'])
def send_all_messages(call):
	Infroamtion_menu = types.InlineKeyboardMarkup (row_width=1)
	Back = types.InlineKeyboardButton (text='‚óÄÔ∏è Back', callback_data="menu")
	More = types.InlineKeyboardButton (text='üåê More', url=tc.more_infromation_link)
	Infroamtion_menu.add (Back,More)
	bot.send_message(call.message.chat.id,text=tc.information_menu,reply_markup=Infroamtion_menu)

		# |||||||||||||||||||||||||||||||||||||||#
		# _______________________________________#
		# _______________________________________#
		# ////// –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–ü–†–û–°–û–í –ù–ê–ü–ò–° \\\\\\ #


# –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–ü–†–û–°–ê "WRITE"
# –ü–û–õ–£–ß–ï–ù–ò–ï –ò–ú–ï–ù–ò –ò –ü–†–û–í–ï–†–ö–ê –ï–ì–û –ü–û –ë–î –∏ –ó–ê–ü–†–û–° –¢–ï–ö–°–¢–ê
@bot.message_handler(func=lambda call:False)
def get_name (message):

	# –ü–û–õ–£–ß–ï–ù–ò–ï –î–ê–ù–ù–´–• –û–¢–ü–ê–†–í–ò–¢–ï–õ–Ø
	USER_ID_SENDER = message.from_user.id
	USER_NAME_SENDER = message.from_user.username

	# –ü–û–õ–£–ß–ï–ù–ò–ï –ò–ú–ï–ù–ò –ü–û–õ–£–ß–ê–¢–ï–õ–Ø
	user_name_reciever = message.text
	user_name_reciever = user_name_reciever.split ('@', 1)
	try:
		USER_NAME_RECIEVER = user_name_reciever [1]

		# –ü–û–õ–£–ß–ï–ù–ò–ï ID / –ü–†–û–í–ï–†–ö–ê –ù–ê –ù–ê–õ–ò–ß–ò–ï –í –ë–î
		user_id_reciever = db.get_user_id (USER_NAME_RECIEVER)
		if user_id_reciever == 0:
			USER_ID_RECIEVER = 0
			bot.send_message (message.chat.id,text=tc.write_reciever_n_found)
		else:
			USER_ID_RECIEVER = user_id_reciever
			bot.send_message (message.chat.id,text=tc.write_reciever_found)

		bot.send_message (message.from_user.id, text=tc.write_message_txt)
		bot.register_next_step_handler (message, get_valentine, USER_ID_SENDER, USER_NAME_SENDER, USER_NAME_RECIEVER,USER_ID_RECIEVER)

	except IndexError:
		bot.send_message(message.chat.id,text=tc.write_error_reciever)
		welcome_menu(message)

# –ü–û–õ–£–ß–ï–ù–ò–ï –¢–ï–ö–°–¢–ê –∏ –ó–ê–ü–†–û–° –°–¢–ê–¢–£–°–ê
def get_valentine (message,USER_ID_SENDER,USER_NAME_SENDER, USER_NAME_RECIEVER,USER_ID_RECIEVER):
	# –ü–û–õ–£–ß–ï–ù–ò–ï –ü–ò–°–¨–ú–ê
	USER_MESSAGE = message.text
	# –ü–û–õ–£–ß–ï–ù–ò–ï –ö–û–õ–ò–ß–ï–°–¢–í–ê –ü–ò–°–ï–ú, –î–õ–Ø –°–û–ó–î–ê–ù–ò–Ø –£–ù–ò–ö–ê–õ–¨–ù–û–ì–û –ü–û–†–Ø–î–ö–û–í–û–ì–û –ù–û–ú–ï–†–ê
	MESSAGE_NUMBER = db.get_number_of_messages () + 1
	bot.send_message (message.chat.id,text=tc.write_sender_status_txt)

	bot.register_next_step_handler (message, get_show_status, USER_ID_SENDER, USER_NAME_SENDER, USER_NAME_RECIEVER,USER_ID_RECIEVER,USER_MESSAGE,MESSAGE_NUMBER)

# –ü–û–õ–£–ß–ï–ù–ò–ï –°–¢–ê–¢–£–°–ê –∏ –ó–ê–ü–†–û–°
def get_show_status (message,USER_ID_SENDER, USER_NAME_SENDER, USER_NAME_RECIEVER,USER_ID_RECIEVER,USER_MESSAGE,MESSAGE_NUMBER):
	# –ü–û–õ–£–ß–ï–ù–ò–ï –°–¢–ê–¢–£–°–ê –û–¢–ü–†–ê–í–ò–¢–ï–õ–Ø
	try:
		SENDER_SHOW_STATUS = int(message.text)
		if SENDER_SHOW_STATUS == 1 or SENDER_SHOW_STATUS == 0:

			# –°–û–ó–î–ê–ù–ò–ï –ù–û–í–û–ì–û –ü–ò–°–¨–ú–ê –í –ë–î
			db.register_message (MESSAGE_NUMBER, USER_ID_SENDER, USER_NAME_SENDER, USER_MESSAGE, USER_ID_RECIEVER,
								 USER_NAME_RECIEVER, SENDER_SHOW_STATUS)
			bot.send_message (message.chat.id,text=tc.write_menu_end)
			welcome_menu (message)

		else:
			bot.send_message (message.chat.id, text=tc.write_error_sender_status_digit)
			bot.send_message (message.chat.id, text="Your's valentine:\n\n" + USER_MESSAGE)
			welcome_menu (message)

	except ValueError:
		bot.send_message (message.chat.id,text=tc.write_error_sender_status_letter)
		bot.send_message (message.chat.id,text="Your's valentine:\n\n"+USER_MESSAGE)
		welcome_menu (message)

	# |||||||||||||||||||||||||||||||||||||||#
	# _______________________________________#
	# _______________________________________#
	# ////// ADMIN ADMIN ADMIN ADMIN  \\\\\\ #

@bot.message_handler (chat_id=[5164010500], commands=['send'])
def admin_message (message):
	bot.send_message (message.chat.id,
					  "#222 –ù–∞–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ–Ω–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º, –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –≤ –±–æ—Ç–µ")
	bot.register_next_step_handler (message, admin_write_1)

def admin_write_1 (message):
	MESSAGE = message.text
	bot.send_message (message.chat.id, text='Your message:\n' + MESSAGE + '\nSend? (yes/no)')
	bot.register_next_step_handler (message, admin_write_2, MESSAGE)

def admin_write_2 (message, MESSAGE):
	user_response = message.text.lower ()
	RESTRICT = [5145905234, 5040853954]

	if user_response == 'yes':
		all_users = db.get_all_users ()
		for _ in range (len (all_users)):
			USER_ID = all_users [_] [0]
			if USER_ID in RESTRICT:
				print ('Skipping sending to BOT')
				pass
			else:
				bot.send_message (chat_id=USER_ID,
								  text='‚ö†Ô∏èMessage from admin‚ö†Ô∏è\n\n' + MESSAGE + '\n\nFor help write to @mibvalentines')

		bot.send_message (message.chat.id, '–í—ã–ø–æ–ª–Ω–µ–Ω–æ')
	elif user_response == 'no':
		bot.send_message (message.chat.id, '–û—Ç–º–µ–Ω–µ–Ω–æ )))')
	welcome_menu (message)

		# |||||||||||||||||||||||||||||||||||||||#
		# _______________________________________#
		# _______________________________________#
		# ////// –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–ü–†–û–°–û–í –†–ï–î   \\\\\\ #

# –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–ü–†–û–°–ê "ALL"
@bot.callback_query_handler(lambda query: query.data in ['All'])
def all_valentines(call):
#	print(call.from_user.id)
	Valentines_menu = types.InlineKeyboardMarkup (row_width=2)
	# –ü–û–õ–£–ß–ê–ï–ú –í–°–ï –í–ê–õ–ï–ù–¢–ò–ù–ö–ò –ß–ï–õ–û–í–ï–ö–ê
	all_valentines_from_user = db.get_message(call.from_user.id)
	for _ in range (len(all_valentines_from_user)):
		reciver_name = all_valentines_from_user[_][5]
		_ = types.InlineKeyboardButton (text=reciver_name,callback_data="valentine!" + reciver_name)
		Valentines_menu.add(_)
	Back = types.InlineKeyboardButton (text='‚óÄÔ∏è Back',callback_data="menu")
	Valentines_menu.add (Back)
	# –í–´–í–û–î –í–°–ï–• –í–ê–õ–ï–ù–¢–ò–ù–û–ö
	bot.send_message(call.message.chat.id,text=tc.edit_menu_list,reply_markup=Valentines_menu)

# –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–ü–†–û–°–ê "ALL" –î–õ–Ø –û–î–ù–û–ì–û –°–û–û–ë–©–ï–ù–ò–Ø
@bot.callback_query_handler (func=lambda call: True)
def check(call):
	if call.data.startswith("valentine!"):
		USER_ID = call.from_user.id
		MESSAGE_RECIVER = call.data
		MESSAGE_RECIVER = MESSAGE_RECIVER.split ('!')[1]

		# –í–´–í–û–î –ü–†–ï–í–¨–Æ –°–û–û–ë–©–ï–ù–ò–Ø
		all_valentines_from_user = db.get_message (call.from_user.id)
		for _ in range (len (all_valentines_from_user)):
			if all_valentines_from_user[_][5] == MESSAGE_RECIVER:
				MESSAGE_NUMBER = all_valentines_from_user [_] [0]
				MESSEGE = all_valentines_from_user [_] [3]
				MESSAGE_RECIVER = all_valentines_from_user[_][5]
				SHOW_SENDER_STATUS = all_valentines_from_user[_][6]
				break
			else:
				pass

		# –î–ï–ô–°–¢–í–ò–ï –ü–û –£–î–ê–õ–ï–ù–ò–Æ/–†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–Æ –°–û–û–ë–©–ï–ù–ò–Ø
		Message_Menu = types.InlineKeyboardMarkup (row_width=2)
		Item_1= types.InlineKeyboardButton (text='‚ùå Delete',callback_data="delete!"+ str(MESSAGE_NUMBER))
		Item_2 = types.InlineKeyboardButton (text='‚úçÔ∏è Edit text',callback_data="edit!"+ str(MESSAGE_NUMBER))
		Item_3 = types.InlineKeyboardButton (text='‚óÄÔ∏è Back', callback_data="All")
		Message_Menu.add(Item_1,Item_2,Item_3)

		if SHOW_SENDER_STATUS == 0:
			bot.send_message (call.message.chat.id, text='Not anonymous\nValentine to: ' + '@' + MESSAGE_RECIVER + '\n' + MESSEGE,reply_markup=Message_Menu)

		elif SHOW_SENDER_STATUS == 1:
			bot.send_message (call.message.chat.id, text='Anonymous\nValentine to: ' + '@' + MESSAGE_RECIVER + '\n' + MESSEGE, reply_markup=Message_Menu)


#		bot.send_message(call.message.chat.id, text='Valentine to: '+'@'+MESSAGE_RECIVER+'\n'+MESSEGE,reply_markup=Message_Menu)
#		print(call.message.message_id)

	# –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –°–û–û–ë–©–ï–ù–ò–Ø
	if call.data.startswith ("edit!"):
		MESSAGE_NUMBER = call.data
		MESSAGE_NUMBER = int (MESSAGE_NUMBER.split ('!') [1])

		bot.send_message (call.message.chat.id, text=tc.edit_menu_text)
		bot.register_next_step_handler(call.message,change_text,MESSAGE_NUMBER)

	# –£–î–ê–õ–ï–ù–ò–ï –°–û–û–ë–©–ï–ù–ò–Ø
	if call.data.startswith ("delete!"):
		MESSAGE_NUMBER = call.data
		MESSAGE_NUMBER = int(MESSAGE_NUMBER.split ('!') [1])

		# –ü–†–û–í–ï–†–ö–ê –£–î–ê–õ–ï–ù–ò–Ø –ü–ò–°–¨–ú–ê
		bot.send_message(call.message.chat.id,text=tc.edit_menu_delete_check)
		bot.register_next_step_handler(call.message,final_delete_message,MESSAGE_NUMBER)

# –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–ü–†–û–°–ê –ü–û –ó–ê–ú–ï–ù–ï –¢–ï–ö–°–¢–ê
@bot.message_handler(func=lambda call:False)
def change_text (message,MESSAGE_NUMBER):
	user_message = message.text
	db.change_text(MESSAGE_NUMBER,user_message)

	all_valentines_from_user = db.get_message (message.from_user.id)
	for _ in range (len (all_valentines_from_user)):
		if all_valentines_from_user [_] [0] == MESSAGE_NUMBER:
			MESSAGE_NUMBER = all_valentines_from_user [_] [0]
			MESSEGE = all_valentines_from_user [_] [3]
			MESSAGE_RECIVER = all_valentines_from_user [_] [5]
			# "SHOW SENDER STATUS ?????????????????????????????????"
			break
		else:
			pass

	# –î–ï–ô–°–¢–í–ò–ï –ü–û –£–î–ê–õ–ï–ù–ò–Æ/–†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–Æ –°–û–û–ë–©–ï–ù–ò–Ø
	Message_Menu = types.InlineKeyboardMarkup (row_width=2)
	Item_1 = types.InlineKeyboardButton (text='‚ùå Delete', callback_data="delete!" + str (MESSAGE_NUMBER))
	Item_2 = types.InlineKeyboardButton (text='‚úçÔ∏è Edit text', callback_data="edit!" + str (MESSAGE_NUMBER))
	Item_3 = types.InlineKeyboardButton (text='‚óÄÔ∏è Back', callback_data="All")
	Message_Menu.add (Item_1, Item_2, Item_3)

	bot.send_message (message.chat.id, text='Valentine to: ' + '@' + MESSAGE_RECIVER + '\n' + MESSEGE,reply_markup=Message_Menu)

# –ü–û–î–¢–í–†–ï–ñ–î–ï–ù–ò–ï –£–î–ê–õ–ï–ù–ò–Ø –ü–ò–°–¨–ú–ê
def final_delete_message (message,MESSAGE_NUMBER):
	user_response = message.text.lower()
	if user_response == "yes":
		# –û–ë–†–ê–©–ï–ù–ò–ï –ö –ë–î –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
		db.delete_message(MESSAGE_NUMBER)
		# –£–î–ê–õ–ï–ù–ò–ï –°–û–û–ë–©–ï–ù–ò–Ø –ü–†–û–®–õ–û–ì–û
		bot.delete_message(message.chat.id, message.message_id)
		bot.delete_message (message.chat.id, message.message_id - 1)
		bot.delete_message (message.chat.id, message.message_id-2)

		bot.send_message(message.chat.id,text=tc.edit_menu_delete_suc )
		welcome_menu(message)
	elif user_response == "no":
		bot.send_message (message.chat.id,text=tc.edit_menu_delete_can)
		welcome_menu (message)
	else:
		bot.send_message (message.chat.id,text=tc.edit_menu_delete_er)
		welcome_menu (message)

		# |||||||||||||||||||||||||||||||||||||||#
		# _______________________________________#
		# _______________________________________#
		# ////// –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–ü–†–û–°–û–í –û–¢–ü   \\\\\\ #

# –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–ü–†–û–°–ê –ü–û –û–¢–ü–†–ê–í–ö–ï –ü–ò–°–¨–ú–ê
@bot.message_handler(func=lambda call:False)
def send_messages (message,USER_ID):
	user_response = message.text.lower ()
	if user_response == "yes":
		# –û–ë–†–ê–©–ï–ù–ò–ï –ö –ë–î –î–õ–Ø –í–´–ì–†–£–ó–ö–ò –í–°–ï–• –ü–ò–°–ï–ú
		all_valentines_from_user = db.get_message (USER_ID)
		for _ in range (len (all_valentines_from_user)):
			MESSAGE_NUMBER = all_valentines_from_user[_][0]
			MESSAGE_SENDER = all_valentines_from_user[_][2]
			MESSAGE = all_valentines_from_user[_][3]
			MESSAGE_RECIVER_ID = all_valentines_from_user[_][4]
			MESSAGE_RECIVER_NAME = all_valentines_from_user[_][5]
			SHOW_SENDER_STATUS = all_valentines_from_user[_][6]

			if MESSAGE_RECIVER_ID !=0:
				if SHOW_SENDER_STATUS == 0:
					bot.send_message(chat_id=MESSAGE_RECIVER_ID,text='üíå You have new Valentine: \n' + MESSAGE)
				elif SHOW_SENDER_STATUS != 0:
					SENDER_NAME = '@'+MESSAGE_SENDER
					SENDING_MESSAGE = f'From: {SENDER_NAME}\n' + MESSAGE
					bot.send_message(chat_id=MESSAGE_RECIVER_ID,text='üíå You have new Valentine: \n' + SENDING_MESSAGE)

				# –£–î–ê–õ–ï–ù–ò–ï –≠–¢–û–ì–û –ü–ò–°–¨–ú–ê –ò–ó –ë–î (–û–ë–ù–£–õ–ï–ù–ò–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ï–ô)
				db.delete_message (MESSAGE_NUMBER)

			elif MESSAGE_RECIVER_ID == 0:
#####			bot.send_message(message.chat.id,text=f'User @{MESSAGE_RECIVER_NAME} hasnot login in a bot, therefore message to this person will not be sent ')
				bot.send_message(message.chat.id,text=f'User: @{MESSAGE_RECIVER_NAME} '+tc.send_menu_er)

				pass

		bot.send_message (message.chat.id,text=tc.send_menu_suc)
		welcome_menu (message)

	elif user_response == "no":
		bot.send_message (message.chat.id,text=tc.send_menu_can)
		welcome_menu (message)
	else:
		bot.send_message (message.chat.id,text=tc.send_menu_answer_er)
		welcome_menu (message)


		# |||||||||||||||||||||||||||||||||||||||#
		# _______________________________________#
		# _______________________________________#
		# ////// –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò  \\\\\\ #



### –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ü–û–í–¢–û–†–Ø–Æ–©–ò–•–°–Ø –î–ï–ô–°–¢–í–ò–ô
def schedule_checker():
	while True:
		schedule.run_pending()
		sleep(1)

# –§–£–ù–ö–¶–ò–Ø –û–ë–ù–û–í–õ–ï–ù–ò–Ø –ë–ê–ó–´ –î–ê–ù–ù–´–•
def funtion_to_run():
	messages_no_reciever = db.get_message_no_user_reciever_id ()
	for _ in range (len (messages_no_reciever)):
		MESSAGE_NUMBER = messages_no_reciever [_] [0]
		MESSAGE_SENDER_ID = messages_no_reciever [_] [1]
		MESSAGE_RECIVER_ID = messages_no_reciever [_] [4]
		MESSAGE_RECIVER_NAME = messages_no_reciever [_] [5]

		USER_ID_RECIVER_FROM_USERS_DB = db.get_user_id(MESSAGE_RECIVER_NAME)
		if USER_ID_RECIVER_FROM_USERS_DB == 0:
#			print('NO UPDATE')
			pass
		else:
			MESSAGE_RECIVER_ID = USER_ID_RECIVER_FROM_USERS_DB
			db.insert_message_user_id(MESSAGE_NUMBER,MESSAGE_RECIVER_ID)
			bot.send_message(chat_id=MESSAGE_SENDER_ID,text=f'User @{MESSAGE_RECIVER_NAME} '+tc.db_user_update_suc)

#			print ('UPDATE')


#### ADMIN PART
bot.add_custom_filter(custom_filters.ChatFilter ())


		# |||||||||||||||||||||||||||||||||||||||#
		# _______________________________________#
		# _______________________________________#
		# ////// START START START START  \\\\\\ #

if __name__ == "__main__":
	# –°–û–ó–î–ê–ù–ò–ï –ë–î
	db.create_users_tables ()
	db.create_messages_tables ()

	# SCHEDULE –û–ë–ù–û–í–õ–ï–ù–ò–ï –ë–î
	schedule.every(1).minutes.do(funtion_to_run)
	Thread(target=schedule_checker).start()

	##### –ß–µ–∫ —Ä–µ–≥–∏—Å—Ç—Ä —Ç–µ–ª–µ–≥–∏–∏ –ø–æ –Ω–∏–∫—É !!!!!!!!

	# –ó–ê–ü–£–°–ö –ë–û–¢–ê
#	bot.infinity_polling ()
	bot.polling(none_stop=True)

